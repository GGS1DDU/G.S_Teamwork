package elms.data.financedata;

import java.io.*;
import java.rmi.RemoteException;
import java.rmi.server.UnicastRemoteObject;
import java.util.ArrayList;
import java.util.Date;

import elms.dataservice.financedataservice.InitAllDataService;
import elms.po.AccountPO;
import elms.po.StoragePO;

public class InitAllData extends UnicastRemoteObject implements InitAllDataService{
   
    
     boolean initMember;
		boolean initStoragex;
		boolean initAccount;
		boolean initCar;
    public InitAllData() throws RemoteException {
		super();
		// TODO 自动生成的构造函数存根
	}
   
    
    public static void main(String args[]) throws RemoteException{
	   InitAllData i=new InitAllData();
	   try {
		i.initAll("233");
		i.copy();  //复制当前数据   							
	} catch (ClassNotFoundException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	} catch (IOException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}
   }
	
	public void  initAll(String time) throws RemoteException,IOException, ClassNotFoundException {
	   
		File file=new File("Storage.ser");
		File cfile=new File(time+" Storage.ser");
		FileInputStream fis=new FileInputStream(file);FileOutputStream  fos=new FileOutputStream(cfile,true);
		ObjectInputStream ois=new ObjectInputStream(fis);ObjectOutputStream oos=new ObjectOutputStream(fos);
		StoragePO storagepo=null;
			storagepo=(StoragePO)ois.readObject();
			oos.writeObject(storagepo);	
			while(fis.available()>0){
					byte[] buf=new byte[4];
					fis.read(buf);
					storagepo=(StoragePO)ois.readObject();
					oos.writeObject(storagepo);				
					}		
		    ois.close();
		    oos.close();	    
		    setInitState();
		   //    在告知初始化前  现将现有的数据情况储存起来  然后设置初始化状态  告知初始化
	}

	public void copy()  throws IOException, ClassNotFoundException{
		File file=new File("Storage.ser");
		File cfile=new File("copy Storage.ser");
		FileInputStream fis=new FileInputStream(file);FileOutputStream  fos=new FileOutputStream(cfile);
		ObjectInputStream ois=new ObjectInputStream(fis);ObjectOutputStream oos=new ObjectOutputStream(fos);
		StoragePO storagepo=null;
	
			storagepo=(StoragePO)ois.readObject();
			oos.writeObject(storagepo);	
			while(fis.available()>0){
					byte[] buf=new byte[4];
					fis.read(buf);
					storagepo=(StoragePO)ois.readObject();
					oos.writeObject(storagepo);				
					}		
		    ois.close();
		    oos.close();	//  备份数据     就是在各部分完成初始化构建以后   这里调用copy   将文件写到copy  ser 
	}


	public void recovery() throws IOException, ClassNotFoundException {
		File file=new File("Storage.ser");
		File cfile=new File("copy Storage.ser");
		FileInputStream fis=new FileInputStream(cfile);FileOutputStream  fos=new FileOutputStream(file);
		ObjectInputStream ois=new ObjectInputStream(fis);ObjectOutputStream oos=new ObjectOutputStream(fos);
		StoragePO storagepo;
		storagepo=(StoragePO)ois.readObject();
		oos.writeObject(storagepo);	
		while(fis.available()>0){
				byte[] buf=new byte[4];
				fis.read(buf);
				storagepo=(StoragePO)ois.readObject();
				oos.writeObject(storagepo);				
				}		
	    ois.close();
	    oos.close();	//  把当年的备份恢复    
	}


	public boolean getInitState(int a) throws RemoteException {
		switch(a){
		case 1: return initMember;
		case 2: return initCar;
		case 3: return initStorage;
		case 4: return initAccount;
		default : return false;
		}//  按照不同界面上返回的数值类型  来确定需要的值   然后确定是否进行初始化
	}

   
	public void setInitState() throws RemoteException {
		initCar=true;
		initMember=true;
		initStorage=true;
		initAccount=true;	
	}
	
	public  void  addAccount(AccountPO po) throws IOException{
		File file=new File("Account.ser");
		FileOutputStream fos=new FileOutputStream(file,true);
		ObjectOutputStream oos=new ObjectOutputStream(fos);
		oos.writeObject(po);
	    oos.close();
	}
	public ArrayList<AccountPO> getAccount() throws ClassNotFoundException, IOException{
		File file=new File("Account.ser");
		FileInputStream fis=new FileInputStream(file);
		ObjectInputStream ois=new ObjectInputStream(fis);
	    ArrayList<AccountPO> arr=new ArrayList<AccountPO>();
	    AccountPO accountpo=null;
	    accountpo=(AccountPO)ois.readObject();
	    while(fis.available()>0){
			byte[] buf =new byte[4];
			fis.read(buf);
			accountpo=(AccountPO)ois.readObject();
			arr.add(accountpo);
		}   
	    return arr;
	}
}
